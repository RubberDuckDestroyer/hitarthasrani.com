{"componentChunkName":"component---src-templates-blog-post-js","path":"/aws-devax-blackbelt/day3/","result":{"data":{"site":{"siteMetadata":{"title":"Hitarth Asrani","author":"Hitarth Asrani"}},"markdownRemark":{"id":"0c5740db-0f05-5834-9c90-b938a560734f","excerpt":"Building Event Driven Systems Journey to event driven arch\nUnderstand domain (Event storming)\nPick event router (Managing events)\nPick event store (Durability…","html":"<h2>Building Event Driven Systems</h2>\n<p>Journey to event driven arch\nUnderstand domain (Event storming)\nPick event router (Managing events)\nPick event store (Durability Model)\nStructure events</p>\n<p>Event is\nSingle from one part of system\ntelling that the state changed\nto another part of system</p>\n<p>Event already happened\nand is not happening now.</p>\n<p>Map events to business domains\nusing attributes</p>\n<p>Orchestrate a business process (multi step process)\nwithin a domain.</p>\n<p>Choreograph events between domain\nIf Pub doesnt care about approach use buses</p>\n<p>Events are Observable\nAnd Not directed\nDumb Pipes\nIntelligent Endpoints</p>\n<h3>Event Arch Messaging Patterns</h3>\n<p>Removing dependency of systems when not required\nconsider insurance company\nwith customer management system\nwith quote generator\nwith comms system</p>\n<h4>Pattern Event Notification</h4>\n<p>Command happens present tense\nCommand adds coupling if neccesary.\nevent happened past tense\ntherefore more decoupled.</p>\n<p>When action happens,\nsystem takes message (event)\nand updates bus.</p>\n<p>When Bus updated,\nmultiple subscribers can read.</p>\n<p>In this approach\nwe do decouple\nbut lose overall statement of behaviour\n(Traceability, Reachability)</p>\n<p>— SQS or SNS</p>\n<h4>Pattern Event Carried State Transfer</h4>\n<p>Consider system drops message\non bus\ndownstream observers aware\nbut have no context of change\nand will call back original system\nCreating hotspot</p>\n<p>Instead use Dependency Injection (IoC)\nMeaning Put data in message\nEvent Carried State Transfer.</p>\n<p>Problem becomes\nBus may have old data (milliseconds old)\nBus may have too much data</p>\n<p>Removes load on supplier\nbut have replicated data\nwith eventual consistency</p>\n<p>Problems with approach\nState is ephemeral, transient\nOnce message is consumed state is gone\nDifficult to obtain history\nDifficult to debug</p>\n<h4>Pattern Event Sourcing</h4>\n<p>Goes hand in hand with event sourcing</p>\n<p>Consider user changes address\nGeneral approach - update db and etc immidiately.\nIn event sourcing,\nevent dropped into bus,\nimmutable append only log\nand then send to db.</p>\n<p>“write to log and replay log into system”</p>\n<p>Change not made directly\nAlso source of truth reads from bus\nApp State separated</p>\n<p>Log does not store final state\njust changes</p>\n<p>good replayability and auditing\ntherefore easy debug.\nAnd alternative state</p>\n<p>But Unfamimiliar approach\ndifficult integration\nand difficult storage/snapshots.</p>\n<h4>CQRS Command Query Responsibility Segregation</h4>\n<p>Same data replicated into multiple data stores</p>\n<p>User uses different\npath or model\nfor reading and writing</p>\n<p>Scale reads and maybe\nhave different read schemas</p>\n<p>Uses command for write\nquery for read\nBoth different schema\nCould be separate DBs</p>\n<p>Microservices could have\nmultiple databases</p>\n<p>CQRS Works well\nwith event sourcing</p>\n<p>Service querying will have shadow data</p>\n<p>CQRS + Sourcing\nBenefit Audit, debugging, alternate State\nMemory Image, Performance, Microservices</p>\n<p>Problems Unfamiliar\nIntegration\nStorage/Snapshots</p>\n<p>— Lambda, Elasticache, Dynamo, Kafka</p>\n<h2>CQRS</h2>\n<p>One model to udpate info\nanother to read</p>\n<p>Allows horizontal scaling of read model\nTake advantage of eventual consistency\nflexible read and write\npromotes polyglot persistence</p>\n<p>Day 2 problems?\nA. Operationalization side - good ops management needed.\nWhen data being shared, need to get buses correct.</p>\n<p>Old Tech Stack, new to devOps. Hard to add CQRS.\nA. CQRS is from a paper in 1980s so concepts is quite old.\nYou need to liberate data from a monolith and make multiple copies for microservices</p>\n<p>Problems with vertical scaling DB\nA. Decide whether DB needs read or write access. Can write helper for it.\nOver time - decide what kind of read or write. Additional confidence. Initial step is hard, easier after that.</p>\n<h2>Decoupoling arch with messaging and streaming</h2>\n<p>Picking an event router</p>\n<p>Event router\nAsync Events - buffering\nEvent stores - durable logs</p>\n<h3>Option Sync Decoupling</h3>\n<p>Using load balancer to push downstream</p>\n<h3>Solution Async Decoupling</h3>\n<p>Using queues\nBuffer spike load\nscale based on resource availability\nrather than blindly reacting to spikes</p>\n<p>— SQS</p>\n<h2>Message Channels // SQS, SNS, Event Bridge and IoT</h2>\n<p>Point to point (Queue)\nA consumer will pick up the message based on availability\nAll messages received by consumers\nbut not all consumers get all messages</p>\n<p>Solution: Fan out using SNS for multiple subscribers\nPublish Subscribe (topic)</p>\n<p>SQS FIFO Queue - Deterministric Ordering</p>\n<p>Problem - mapping/routing events to topics (Coupling)\nSolution - Attribute filtering (De-coupling) — SNS Message Filters</p>\n<h3>Non Deterministric consumer scale</h3>\n<p>Use IoT Message Broker\ncould also consider using APIGW or AppSync</p>\n<p>Is Faster w/ MQTT</p>\n<h3>EventBridge</h3>\n<p>Serverless event bus service</p>\n<p>As requirements grow,\nDecoupling grows and services increase</p>\n<p>EventBridge makes it nicer to add downstream observers\nAbstract producers and consumers</p>\n<p>Producers talk to bus,\nconsumers bind to eventbridge\nand not arbitraty queue</p>\n<p>Can have sources\nAWS Services\nCustom Events\nSaaS apps</p>\n<p>Event Bus\nDefault, custom SaaS</p>\n<p>No callback into event bridge</p>\n<p>Loose coupling,\nScalable,\nExtensible,\nCan deal with complex shit\nReliable</p>\n<h2>Capstone Project</h2>\n<p>Oral defence/panel. Not a dev. Will be issued a black belt badge. Will send some registration with up to 2 people per team and mock panel with team.</p>","frontmatter":{"title":"AWS APN DevAx Black Belt Day 3","date":"March 30, 2022","description":"AWS DevAx Black Belt Day 3."}}},"pageContext":{"slug":"/aws-devax-blackbelt/day3/","previous":{"fields":{"slug":"/oh-and-backup/"},"frontmatter":{"title":"Always backup"}},"next":{"fields":{"slug":"/aws-iam-policy-simulator/"},"frontmatter":{"title":"Using AWS IAM Policy Simulator to debug IAM Policy Issues"}}}},"staticQueryHashes":["4123550546","63159454"]}