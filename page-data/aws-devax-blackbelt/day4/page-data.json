{"componentChunkName":"component---src-templates-blog-post-js","path":"/aws-devax-blackbelt/day4/","result":{"data":{"site":{"siteMetadata":{"title":"Hitarth Asrani","author":"Hitarth Asrani"}},"markdownRemark":{"id":"048637de-6cb0-5f4e-8a1f-e1972b6f4ff9","excerpt":"Authentication and authorization w/ Cognito User Management\nhard to implement by itself —Cognito\nHandles Authentication, Authorization, Data Sync Cognito User…","html":"<h2>Authentication and authorization w/ Cognito</h2>\n<p>User Management\nhard to implement by itself</p>\n<p>—Cognito\nHandles Authentication, Authorization, Data Sync</p>\n<h3>Cognito User Pools - User Database</h3>\n<p>Managed user directory\nhosted ui\njwt and oauth tokens\nfederate with userpools</p>\n<p>Simplify Security, integrates with IAM roles\nSupports multiple logins\nsupports “guest” users.</p>\n<h3>Cognito Identity Pools/Federated Identities</h3>\n<p>Token Vending machine\nfederation and aws creds</p>\n<h3>Use Cases/Scenarios</h3>\n<p>B2C - 3rd party\nB2B - SAML\nB2E\nIoT</p>\n<h3>Security Architecture</h3>\n<p>OIDC Login for token -> Exchanged for STS Token -> Cognito assigns uuid for user’s app request</p>\n<p>Federate using</p>\n<ul>\n<li>User Pools; priceed per user</li>\n<li>Identity Pools; free</li>\n</ul>\n<p>User flows can be customized\nAdmin Capabilities</p>\n<p>Cogniro User Pool Tokens:</p>\n<p>Identity Token\nJWR, can be used for auth\n1hr expiry</p>\n<p>Access token - used for access\n1hr expiry</p>\n<p>Refresh Token</p>\n<p>JWT Dissection:</p>\n<p>Header - Key ID, Algo (RS256?)\nPayload -\nIdentity Payload:Cognito Groups, user pool, custom claim, app client id, expiration, identity info\nAccess token payload: - have scope for fine grain access control\nSignature - Proof for decrypt</p>\n<h2>API Auth with APIGW</h2>\n<p>Native intefration for AuthN\nUsing Userpools, IAM Authorizors and Lambda\n3 options for AuthN</p>\n<p>User Pool validates token, invokes lambda for backend logic,\nLambda gives response</p>\n<p>W/ API GW\nUse UserPool supplied creds in API GW</p>\n<p>Lambda - Response either allow or deny\nbased on JWT Request to API GW</p>\n<p>IAM Integration with lambda - invoke lambda with caller’s creds\n<code class=\"language-text\">context.getIdentity().getIdentityId()</code> to get ID and Identity Pool ID</p>\n<h2>ObservaBLT</h2>\n<p>Understand failure modes - what’s broken and slow.\nKnowing and understanding problems in system.</p>\n<p>Monitoring tells you whether a system is working\nObservaBLT let’s you understand why it isn’t working</p>\n<p>Detect, Investigate, Remediate\nMost time spent in Investigation.\nReduce MTTR</p>\n<h3>Monitoring needs to evolve</h3>\n<p>UX, Short Lived resources, More Devices/Data, Faster release velocity</p>\n<p>Monitoring is more than failures\nKnowing if app performs correctly/ Is it behaving correctly?\nWhat is the usage\nWhat is the business impact.</p>\n<p>Issue Timeline consists of:</p>\n<p>Stage 1 - Detect.\nMTTD - Mean time to detect.</p>\n<p>Stage 2 - Identification\nMTTI - Mean Time to Identify.\nTotal MTTI = MTTI + MTTD</p>\n<p>Stage 3.1 - Fix Stage 3.2 - Verify (Remidiate)\nMTTR = Mean Time to remediate\nMTTR = MTTD + MTTI + Fix Time +  Verify Time</p>\n<h3>Consistent Mechanism - OODA Loop</h3>\n<p>Observe\nOrient\nDecide\nAct</p>\n<p>Favours agility over power.</p>\n<p>Proactive ops - catch issue before the system goes into a completely failed state.\nex - latency.</p>\n<h3>Tools and Challenges</h3>\n<p>Key Tools:</p>\n<p>AWS XRay - Collect traces from distributed systems\nXRay Analytics\nCloudwatch Logs, Logs Insights. Can also use cloudwatch agent on on-prem resources.\nCloudwatch Metrics, Metric Math expressions, Dashboards</p>\n<p>3 pillars of observaBLT</p>\n<p>Metrics - Numeric data\nLogs - Timestamped records of events. May have metrics\nTraces - Single user journey through parts of an app.</p>\n<p>Pillars need to correlate together to bring full ObservaBLT</p>\n<p>Tools can be classified into</p>\n<p>Infra Monitoring,App Monitoring,Synthetic monitoring</p>\n<p>Tools</p>\n<ul>\n<li>CW Container insights.(ECS, EKS, Forgate, K8 on EC2). Prometheus metrics supports.</li>\n<li>CW lambda insights. Undertsnd compute, mem alloc and function duration. Linked to logs insights and analytics</li>\n<li>CW Contributor Insights. Top N Contributiors + usage. Filter, aggregate and visualise operational health. Can be used with DynamoDB</li>\n<li>CW Synthetics. Check canary monitoring/ haertbeat monitoring. Puppeteer or selenium. COnfigurable scripts. Blueprints for API Testing, check for broken links, check against baseline.</li>\n<li>CW Metrics Explorer - Tag based dashboard builders.</li>\n<li>CW ServiceLens. Correlate logs, metrics and traces. Identify bottlenecks, performance issues and pinpoint impacted users.</li>\n<li>XRay Insights. See a service map. analyse and filter traces. Create filter groups.</li>\n</ul>\n<h2>AWS XRay</h2>\n<p>Prod ready, can use with non aws services.</p>\n<p>XRay Components:</p>\n<p>Trace - ennd to end. user to data layer and back\nSegment - Groups of services\nSubsegments - individual service levels\nCan also add metadata/tags</p>\n<h2>New Troubleshooting Workflow</h2>\n<p>Synthetic Alerts, Insight notification. Detect and indentify.</p>\n<h2>IaC with AWS CDK</h2>\n<p>CDK - Cloud Development Kit</p>\n<p>App that can contain one or more stacks.\nApps have constructs which have one or more resources. ex: Elasticache redis config</p>\n<p>Main components:\nCore Framework\nConstruct Library\nAWS CDK CLI</p>\n<p>AWS Construct Library has many examples.\neg: 6 lines of code for ALB Balanced Fargate service</p>\n<p>Construct levels </p>\n<ul>\n<li>L1; CFN Resources (Automatically generateed)</li>\n<li>L2 - aws constructs (High level constrycts)</li>\n<li>L3; Purpose built constructs (Opiniated abstractions)</li>\n</ul>","frontmatter":{"title":"AWS APN DevAx Black Belt Day 4","date":"Invalid date","description":"AWS DevAx Black Belt Day 4."}}},"pageContext":{"slug":"/aws-devax-blackbelt/day4/","previous":{"fields":{"slug":"/aws-devax-blackbelt/"},"frontmatter":{"title":"AWS APN DevAx Black Belt Day 1"}},"next":null}},"staticQueryHashes":["4123550546","63159454"]}